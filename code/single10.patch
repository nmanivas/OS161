diff --git a/kern/arch/mips/syscall/syscall.c b/kern/arch/mips/syscall/syscall.c
index 0f773bd..68c73ff 100644
--- a/kern/arch/mips/syscall/syscall.c
+++ b/kern/arch/mips/syscall/syscall.c
@@ -32,6 +32,7 @@
 #include <kern/syscall.h>
 #include <lib.h>
 #include <mips/trapframe.h>
+#include <copyinout.h>
 #include <thread.h>
 #include <current.h>
 #include <syscall.h>
@@ -80,7 +81,10 @@ syscall(struct trapframe *tf)
 {
 	int callno;
 	int32_t retval;
+        int32_t retvalv1 = 0;
+        int64_t retval64;
 	int err;
+        int32_t stackarg1;
 
 	KASSERT(curthread != NULL);
 	KASSERT(curthread->t_curspl == 0);
@@ -108,6 +112,37 @@ syscall(struct trapframe *tf)
 		err = sys___time((userptr_t)tf->tf_a0,
 				 (userptr_t)tf->tf_a1);
 		break;
+            case SYS_open:
+		err = sys_open((userptr_t)tf->tf_a0, tf->tf_a1, tf->tf_a2, 
+			       &retval);
+		break;
+	    case SYS_read:
+		err = sys_read(tf->tf_a0, (userptr_t)tf->tf_a1, tf->tf_a2, 
+			       &retval);
+		break;
+	    case SYS_write:
+		err = sys_write(tf->tf_a0, (userptr_t)tf->tf_a1, tf->tf_a2, 
+				&retval);
+		break;
+	    case SYS_close:
+		err = sys_close(tf->tf_a0);
+		break;
+	    case SYS_lseek:
+                copyin((const_userptr_t) tf->tf_sp + 16, &stackarg1, sizeof(int32_t));
+                err = sys_lseek(tf->tf_a0, (off_t) ((off_t) tf->tf_a2 << 32 | (off_t) tf->tf_a3),
+                                stackarg1, &retval64);
+                retval = retval64 >> 32;
+                retvalv1 = (int) retval64;
+		break;
+	    case SYS_dup2:
+		err = sys_dup2(tf->tf_a0, tf->tf_a1, &retval);
+		break;
+	    case SYS_chdir:
+		err = sys_chdir((userptr_t)tf->tf_a0);
+		break;
+	    case SYS___getcwd:
+		err = sys___getcwd((userptr_t)tf->tf_a0, tf->tf_a1, &retval);
+		break;
 
 	    /* Add stuff here */
  
@@ -130,6 +165,7 @@ syscall(struct trapframe *tf)
 	else {
 		/* Success. */
 		tf->tf_v0 = retval;
+                tf->tf_v1 = retvalv1;
 		tf->tf_a3 = 0;      /* signal no error */
 	}
 	
diff --git a/kern/conf/conf.kern b/kern/conf/conf.kern
index d527f61..e1d7682 100644
--- a/kern/conf/conf.kern
+++ b/kern/conf/conf.kern
@@ -367,6 +367,8 @@ file      vfs/devnull.c
 file      syscall/loadelf.c
 file      syscall/runprogram.c
 file      syscall/time_syscalls.c
+file      syscall/file_syscalls.c
+file      syscall/file.c
 
 #
 # Startup and initialization
diff --git a/kern/include/file.h b/kern/include/file.h
new file mode 100644
index 0000000..2c63bc2
--- /dev/null
+++ b/kern/include/file.h
@@ -0,0 +1,59 @@
+/*
+ * Declarations for file handle and file table management.
+ * New for SOL2.
+ */
+
+#ifndef _FILE_H_
+#define _FILE_H_
+
+#include <limits.h>
+
+struct lock;
+struct vnode;
+
+/*** openfile section ***/
+
+/* 
+ * openfile struct 
+ * note that there's not too much to keep track of, since the vnode does most
+ * of that.  note that it does require synchronization, because a single
+ * openfile can be shared between processes (filetable inheritance).
+ */
+struct openfile {
+	struct vnode *of_vnode;
+	
+	struct lock *of_lock;
+	off_t of_offset;
+	int of_accmode;	/* from open: O_RDONLY, O_WRONLY, or O_RDWR */
+	int of_refcount;
+};
+
+/* opens a file (must be kernel pointers in the args) */
+int file_open(char *filename, int flags, int mode, int *retfd);
+
+/* closes a file */
+int file_close(int fd);
+
+
+/*** file table section ***/
+
+/*
+ * filetable struct
+ * just an array of open files.  nice and simple.  doesn't require
+ * synchronization, because a table can only be owned by a single process (on
+ * inheritance in fork, the table is copied).
+ */
+struct filetable {
+	struct openfile *ft_openfiles[OPEN_MAX];
+};
+
+/* these all have an implicit arg of the curthread's filetable */
+int filetable_init(const char *inpath, const char *outpath, 
+		   const char *errpath);
+int filetable_copy(struct filetable **copy);
+int filetable_placefile(struct openfile *file, int *fd);
+int filetable_findfile(int fd, struct openfile **file);
+int filetable_dup2file(int oldfd, int newfd);
+void filetable_destroy(struct filetable *ft);
+
+#endif /* _FILE_H_ */
diff --git a/kern/include/syscall.h b/kern/include/syscall.h
index befd3d8..f3a01ad 100644
--- a/kern/include/syscall.h
+++ b/kern/include/syscall.h
@@ -55,6 +55,15 @@ void enter_new_process(int argc, userptr_t argv, vaddr_t stackptr,
  * Prototypes for IN-KERNEL entry points for system call implementations.
  */
 
+int sys_open(userptr_t filename, int flags, int mode, int *retval);
+int sys_read(int fd, userptr_t buf, size_t size, int *retval);
+int sys_write(int fd, userptr_t buf, size_t size, int *retval);
+int sys_close(int fd);
+int sys_lseek(int fd, off_t offset, int32_t whence, off_t *retval);
+int sys_dup2(int oldfd, int newfd, int *retval);
+int sys_chdir(userptr_t path);
+int sys___getcwd(userptr_t buf, size_t buflen, int *retval);
+
 int sys_reboot(int code);
 int sys___time(userptr_t user_seconds, userptr_t user_nanoseconds);
 
diff --git a/kern/include/thread.h b/kern/include/thread.h
index 86706ca..08b8f8c 100644
--- a/kern/include/thread.h
+++ b/kern/include/thread.h
@@ -112,6 +112,7 @@ struct thread {
 	struct vnode *t_cwd;		/* current working directory */
 
 	/* add more here as needed */
+  struct filetable *t_filetable;
 };
 
 /* Call once during system startup to allocate data structures. */
diff --git a/kern/include/uio.h b/kern/include/uio.h
index 5d97c48..c9124e8 100644
--- a/kern/include/uio.h
+++ b/kern/include/uio.h
@@ -119,5 +119,8 @@ int uiomovezeros(size_t len, struct uio *uio);
 void uio_kinit(struct iovec *, struct uio *,
 	       void *kbuf, size_t len, off_t pos, enum uio_rw rw);
 
+void uio_uinit(struct iovec *, struct uio *,
+	       userptr_t ubuf, size_t len, off_t pos, enum uio_rw rw);
+
 
 #endif /* _UIO_H_ */
diff --git a/kern/lib/uio.c b/kern/lib/uio.c
index 594fe96..83ea620 100644
--- a/kern/lib/uio.c
+++ b/kern/lib/uio.c
@@ -153,6 +153,7 @@ void
 uio_kinit(struct iovec *iov, struct uio *u,
 	  void *kbuf, size_t len, off_t pos, enum uio_rw rw)
 {
+	KASSERT(u);
 	iov->iov_kbase = kbuf;
 	iov->iov_len = len;
 	u->uio_iov = iov;
@@ -163,3 +164,19 @@ uio_kinit(struct iovec *iov, struct uio *u,
 	u->uio_rw = rw;
 	u->uio_space = NULL;
 }
+
+void
+uio_uinit(struct iovec *iov, struct uio *u,
+    userptr_t ubuf, size_t len, off_t pos, enum uio_rw rw)
+{
+	KASSERT(u);
+	iov->iov_ubase = ubuf;
+	iov->iov_len = len;
+  u->uio_iov = iov;
+	u->uio_iovcnt = 1;
+	u->uio_offset = pos;
+	u->uio_resid = len;
+	u->uio_segflg = UIO_USERSPACE;
+	u->uio_rw = rw;
+	u->uio_space = curthread->t_addrspace;
+}
diff --git a/kern/syscall/file.c b/kern/syscall/file.c
new file mode 100644
index 0000000..dc5ffe5
--- /dev/null
+++ b/kern/syscall/file.c
@@ -0,0 +1,341 @@
+/*
+ * File handles and file tables.
+ * New for SOL2.
+ */
+
+#include <types.h>
+#include <kern/errno.h>
+#include <kern/limits.h>
+#include <kern/stat.h>
+#include <kern/unistd.h>
+#include <kern/fcntl.h>
+#include <lib.h>
+#include <synch.h>
+#include <uio.h>
+#include <thread.h>
+#include <current.h>
+#include <vfs.h>
+#include <vnode.h>
+#include <file.h>
+#include <syscall.h>
+
+/*** openfile functions ***/
+
+/*
+ * file_open
+ * opens a file, places it in the filetable, sets RETFD to the file
+ * descriptor. the pointer arguments must be kernel pointers.
+ * NOTE -- the passed in filename must be a mutable string.
+ */
+int
+file_open(char *filename, int flags, int mode, int *retfd)
+{
+	struct vnode *vn;
+	struct openfile *file;
+	int result;
+	
+	result = vfs_open(filename, flags, mode, &vn);
+	if (result) {
+		return result;
+	}
+
+	file = kmalloc(sizeof(struct openfile));
+	if (file == NULL) {
+		vfs_close(vn);
+		return ENOMEM;
+	}
+
+	/* initialize the file struct */
+	file->of_lock = lock_create("file lock");
+	if (file->of_lock == NULL) {
+		vfs_close(vn);
+		kfree(file);
+		return ENOMEM;
+	}
+	file->of_vnode = vn;
+	file->of_offset = 0;
+	file->of_accmode = flags & O_ACCMODE;
+	file->of_refcount = 1;
+
+	/* vfs_open checks for invalid access modes */
+	KASSERT(file->of_accmode==O_RDONLY ||
+	        file->of_accmode==O_WRONLY ||
+	        file->of_accmode==O_RDWR);
+
+	/* place the file in the filetable, getting the file descriptor */
+	result = filetable_placefile(file, retfd);
+	if (result) {
+		lock_destroy(file->of_lock);
+		kfree(file);
+		vfs_close(vn);
+		return result;
+	}
+
+	return 0;
+}
+
+/*
+ * file_doclose
+ * shared code for file_close and filetable_destroy
+ */
+static
+int
+file_doclose(struct openfile *file)
+{
+	lock_acquire(file->of_lock);
+
+	/* if this is the last close of this file, free it up */
+	if (file->of_refcount == 1) {
+		vfs_close(file->of_vnode);
+		lock_release(file->of_lock);
+		lock_destroy(file->of_lock);
+		kfree(file);
+	}
+	else {
+		KASSERT(file->of_refcount > 1);
+		file->of_refcount--;
+		lock_release(file->of_lock);
+	}
+
+	return 0;
+}
+
+/* 
+ * file_close
+ * knock off the refcount, freeing the memory if it goes to 0.
+ */
+int
+file_close(int fd)
+{
+	struct openfile *file;
+	int result;
+
+	/* find the file in the filetable */
+	result = filetable_findfile(fd, &file);
+	if (result) {
+		return result;
+	}
+
+	result = file_doclose(file);
+	if (result) {
+		/* leave file open for possible retry */
+		return result;
+	}
+	curthread->t_filetable->ft_openfiles[fd] = NULL;
+
+	return 0;
+}
+
+/*** filetable functions ***/
+
+/* 
+ * filetable_init
+ * pretty straightforward -- allocate the space, initialize to NULL.
+ * note that the one careful thing is to open the std i/o in order to
+ * get
+ * stdin  == 0
+ * stdout == 1
+ * stderr == 2
+ */
+int
+filetable_init(const char *inpath, const char *outpath, const char *errpath)
+{
+	/* the filenames come from the kernel; assume reasonable length */
+	char path[32];
+	int result;
+	int fd;
+
+	/* make sure we can fit these */
+	KASSERT(strlen(inpath) < sizeof(path));
+	KASSERT(strlen(outpath) < sizeof(path));
+	KASSERT(strlen(errpath) < sizeof(path));
+	
+	/* catch memory leaks, repeated calls */
+	KASSERT(curthread->t_filetable == NULL);
+
+	curthread->t_filetable = kmalloc(sizeof(struct filetable));
+	if (curthread->t_filetable == NULL) {
+		return ENOMEM;
+	}
+	
+	/* NULL-out the table */
+	for (fd = 0; fd < OPEN_MAX; fd++) {
+		curthread->t_filetable->ft_openfiles[fd] = NULL;
+	}
+
+	/*
+	 * open the std fds.  note that the names must be copied into
+	 * the path buffer so that they're mutable.
+	 */
+	strcpy(path, inpath);
+	result = file_open(path, O_RDONLY, 0, &fd);
+	if (result) {
+		return result;
+	}
+
+	strcpy(path, outpath);
+	result = file_open(path, O_WRONLY, 0, &fd);
+	if (result) {
+		return result;
+	}
+
+	strcpy(path, errpath);
+	result = file_open(path, O_WRONLY, 0, &fd);
+	if (result) {
+		return result;
+	}
+
+	return 0;
+}
+
+/*
+ * filetable_copy
+ * again, pretty straightforward.  the subtle business here is that instead of
+ * copying the openfile structure, we just increment the refcount.  this means
+ * that openfile structs will, in fact, be shared between processes, as in
+ * Unix.
+ */
+int
+filetable_copy(struct filetable **copy)
+{
+	struct filetable *ft = curthread->t_filetable;
+	int fd;
+
+	/* waste of a call, really */
+	if (ft == NULL) {
+		*copy = NULL;
+		return 0;
+	}
+	
+	*copy = kmalloc(sizeof(struct filetable));
+	
+	if (*copy == NULL) {
+		return ENOMEM;
+	}
+
+	/* copy over the entries */
+	for (fd = 0; fd < OPEN_MAX; fd++) {
+		if (ft->ft_openfiles[fd] != NULL) {
+			lock_acquire(ft->ft_openfiles[fd]->of_lock);
+			ft->ft_openfiles[fd]->of_refcount++;
+			lock_release(ft->ft_openfiles[fd]->of_lock);
+			(*copy)->ft_openfiles[fd] = ft->ft_openfiles[fd];
+		} 
+		else {
+			(*copy)->ft_openfiles[fd] = NULL;
+		}
+	}
+
+	return 0;
+}
+
+/*
+ * filetable_destroy
+ * closes the files in the file table, frees the table.
+ */
+void
+filetable_destroy(struct filetable *ft)
+{
+	int fd, result;
+
+	KASSERT(ft != NULL);
+
+	for (fd = 0; fd < OPEN_MAX; fd++) {
+		if (ft->ft_openfiles[fd]) {
+			result = file_doclose(ft->ft_openfiles[fd]);
+			KASSERT(result==0);
+		}
+	}
+	
+	kfree(ft);
+}	
+
+/* 
+ * filetable_placefile
+ * finds the smallest available file descriptor, places the file at the point,
+ * sets FD to it.
+ */
+int
+filetable_placefile(struct openfile *file, int *fd)
+{
+	struct filetable *ft = curthread->t_filetable;
+	int i;
+	
+	for (i = 0; i < OPEN_MAX; i++) {
+		if (ft->ft_openfiles[i] == NULL) {
+			ft->ft_openfiles[i] = file;
+			*fd = i;
+			return 0;
+		}
+	}
+
+	return EMFILE;
+}
+
+/*
+ * filetable_findfile
+ * verifies that the file descriptor is valid and actually references an
+ * open file, setting the FILE to the file at that index if it's there.
+ */
+int
+filetable_findfile(int fd, struct openfile **file)
+{
+	struct filetable *ft = curthread->t_filetable;
+
+	if (fd < 0 || fd >= OPEN_MAX) {
+		return EBADF;
+	}
+	
+	*file = ft->ft_openfiles[fd];
+	if (*file == NULL) {
+		return EBADF;
+	}
+
+	return 0;
+}
+
+/*
+ * filetable_dup2file
+ * verifies that both file descriptors are valid, and that the OLDFD is
+ * actually an open file.  then, if the NEWFD is open, it closes it.
+ * finally, it sets the filetable entry at newfd, and ups its refcount.
+ */
+int
+filetable_dup2file(int oldfd, int newfd)
+{
+	struct filetable *ft = curthread->t_filetable;
+	struct openfile *file;
+	int result;
+
+	if (oldfd < 0 || oldfd >= OPEN_MAX || newfd < 0 || newfd >= OPEN_MAX) {
+		return EBADF;
+	}
+
+	file = ft->ft_openfiles[oldfd];
+	if (file == NULL) {
+		return EBADF;
+	}
+
+	/* dup2'ing an fd to itself automatically succeeds (BSD semantics) */
+	if (oldfd == newfd) {
+		return 0;
+	}
+
+	/* closes the newfd if it's open */
+	if (ft->ft_openfiles[newfd] != NULL) {
+		result = file_close(newfd);
+		if (result) {
+			return result;
+		}
+	}
+
+	/* up the refcount */
+	lock_acquire(file->of_lock);
+	file->of_refcount++;
+	lock_release(file->of_lock);
+
+	/* doesn't need to be synchronized because it's just changing the ft */
+	ft->ft_openfiles[newfd] = file;
+
+	return 0;
+}
diff --git a/kern/syscall/file_syscalls.c b/kern/syscall/file_syscalls.c
new file mode 100644
index 0000000..8aa024c
--- /dev/null
+++ b/kern/syscall/file_syscalls.c
@@ -0,0 +1,270 @@
+/*
+ * File-related system call implementations.
+ * New for SOL2.
+ */
+
+#include <types.h>
+#include <kern/errno.h>
+#include <kern/limits.h>
+#include <kern/stat.h>
+#include <kern/unistd.h>
+#include <kern/fcntl.h>
+#include <kern/seek.h>
+#include <lib.h>
+#include <synch.h>
+#include <uio.h>
+#include <thread.h>
+#include <current.h>
+#include <vfs.h>
+#include <vnode.h>
+#include <file.h>
+#include <syscall.h>
+#include <copyinout.h>
+
+/*
+ * sys_open
+ * just copies in the filename, then passes work to file_open.
+ */
+int
+sys_open(userptr_t filename, int flags, int mode, int *retval)
+{
+	char fname[PATH_MAX];
+	int result;
+
+	result = copyinstr(filename, fname, sizeof(fname), NULL);
+	if (result) {
+		return result;
+	}
+
+	return file_open(fname, flags, mode, retval);
+}
+
+/*
+ * sys_read
+ * translates the fd into its openfile, then calls VOP_READ.
+ */
+int
+sys_read(int fd, userptr_t buf, size_t size, int *retval)
+{
+  struct iovec iov;
+	struct uio useruio;
+	struct openfile *file;
+	int result;
+
+	/* better be a valid file descriptor */
+	result = filetable_findfile(fd, &file);
+	if (result) {
+		return result;
+	}
+
+	lock_acquire(file->of_lock);
+
+	if (file->of_accmode == O_WRONLY) {
+		lock_release(file->of_lock);
+		return EBADF;
+	}
+
+	/* set up a uio with the buffer, its size, and the current offset */
+  uio_uinit(&iov, &useruio, buf, size, file->of_offset, UIO_READ);
+  
+  // mk_useruio(&useruio, buf, size, file->of_offset, UIO_READ);
+
+	/* does the read */
+	result = VOP_READ(file->of_vnode, &useruio);
+	if (result) {
+		lock_release(file->of_lock);
+		return result;
+	}
+
+	/* set the offset to the updated offset in the uio */
+	file->of_offset = useruio.uio_offset;
+
+	lock_release(file->of_lock);
+	
+	/*
+	 * The amount read is the size of the buffer originally, minus
+	 * how much is left in it.
+	 */
+	*retval = size - useruio.uio_resid;
+
+	return 0;
+}
+
+/*
+ * sys_write
+ * translates the fd into its openfile, then calls VOP_WRITE.
+ */
+int
+sys_write(int fd, userptr_t buf, size_t size, int *retval)
+{
+  struct iovec iov;
+	struct uio useruio;
+	struct openfile *file;
+	int result;
+
+	result = filetable_findfile(fd, &file);
+	if (result) {
+		return result;
+	}
+
+	lock_acquire(file->of_lock);
+
+	if (file->of_accmode == O_RDONLY) {
+		lock_release(file->of_lock);
+		return EBADF;
+	}
+
+	/* set up a uio with the buffer, its size, and the current offset */
+  uio_uinit(&iov, &useruio, buf, size, file->of_offset, UIO_WRITE);
+	
+  //mk_useruio(&useruio, buf, size, file->of_offset, UIO_WRITE);
+
+	/* does the write */
+	result = VOP_WRITE(file->of_vnode, &useruio);
+	if (result) {
+		lock_release(file->of_lock);
+		return result;
+	}
+
+	/* set the offset to the updated offset in the uio */
+	file->of_offset = useruio.uio_offset;
+
+	lock_release(file->of_lock);
+
+	/*
+	 * the amount written is the size of the buffer originally,
+	 * minus how much is left in it.
+	 */
+	*retval = size - useruio.uio_resid;
+
+	return 0;
+}
+
+/* 
+ * sys_close
+ * just pass off the work to file_close.
+ */
+int
+sys_close(int fd)
+{
+	return file_close(fd);
+}
+
+/*
+ * sys_lseek
+ * translates the fd into its openfile, then based on the type of seek,
+ * figure out the new offset, try the seek, if that succeeds, update the
+ * openfile.
+ */
+int
+sys_lseek(int fd, off_t offset, int32_t whence, off_t *retval)
+{
+	struct stat info;
+	struct openfile *file;
+	int result;
+
+	result = filetable_findfile(fd, &file);
+	if (result) {
+		return result;
+	}
+
+	lock_acquire(file->of_lock);
+	
+	/* based on the type of seek, set the retval */ 
+	switch (whence) {
+	    case SEEK_SET:
+		*retval = offset;
+		break;
+	    case SEEK_CUR:
+		*retval = file->of_offset + offset;
+		break;
+	    case SEEK_END:
+		result = VOP_STAT(file->of_vnode, &info);
+		if (result) {
+			lock_release(file->of_lock);
+			return result;
+		}
+		*retval = info.st_size + offset;
+		break;
+	    default:
+		lock_release(file->of_lock);
+		return EINVAL;
+	}
+
+	/* try the seek -- if it fails, return */
+	result = VOP_TRYSEEK(file->of_vnode, *retval);
+	if (result) {
+		lock_release(file->of_lock);
+		return result;
+	}
+	
+	/* success -- update the file structure */
+	file->of_offset = *retval;
+
+	lock_release(file->of_lock);
+
+	return 0;
+}
+
+/* 
+ * sys_dup2
+ * just pass the work off to the filetable
+ */
+int
+sys_dup2(int oldfd, int newfd, int *retval)
+{
+	int result;
+
+	result = filetable_dup2file(oldfd, newfd);
+	if (result) {
+		return result;
+	}
+
+	*retval = newfd;
+	return 0;
+}
+
+/* really not "file" calls, per se, but might as well put it here */
+
+/*
+ * sys_chdir
+ * copyin the path and pass it off to vfs.
+ */
+int
+sys_chdir(userptr_t path)
+{
+	char pathbuf[PATH_MAX];
+	int result;
+	
+	result = copyinstr(path, pathbuf, PATH_MAX, NULL);
+	if (result) {
+		return result;
+	}
+
+	return vfs_chdir(pathbuf);
+}
+
+/*
+ * sys___getcwd
+ * just use vfs_getcwd.
+ */
+int
+sys___getcwd(userptr_t buf, size_t buflen, int *retval)
+{
+  struct iovec iov;
+	struct uio useruio;
+	int result;
+  
+  uio_uinit(&iov, &useruio, buf, buflen, 0, UIO_READ);
+
+	// mk_useruio(&useruio, buf, buflen, 0, UIO_READ);
+
+	result = vfs_getcwd(&useruio);
+	if (result) {
+		return result;
+	}
+
+	*retval = buflen - useruio.uio_resid;
+
+	return 0;
+}
diff --git a/kern/syscall/runprogram.c b/kern/syscall/runprogram.c
index a6f45c8..4ba181a 100644
--- a/kern/syscall/runprogram.c
+++ b/kern/syscall/runprogram.c
@@ -44,6 +44,7 @@
 #include <vfs.h>
 #include <syscall.h>
 #include <test.h>
+#include <file.h>
 
 /*
  * Load program "progname" and start running it in usermode.
@@ -66,6 +67,13 @@ runprogram(char *progname)
 
 	/* We should be a new thread. */
 	KASSERT(curthread->t_addrspace == NULL);
+	
+  if (curthread->t_filetable == NULL) {
+		result = filetable_init("con:", "con:", "con:");
+		if (result) {
+			return result;
+		}
+	}
 
 	/* Create a new address space. */
 	curthread->t_addrspace = as_create();
diff --git a/kern/thread/thread.c b/kern/thread/thread.c
index 5b8099e..60108d3 100644
--- a/kern/thread/thread.c
+++ b/kern/thread/thread.c
@@ -47,6 +47,7 @@
 #include <addrspace.h>
 #include <mainbus.h>
 #include <vnode.h>
+#include <file.h>
 
 #include "opt-synchprobs.h"
 #include "opt-defaultscheduler.h"
@@ -89,7 +90,7 @@ thread_checkstack_init(struct thread *thread)
 
 /*
  * Check the magic number we put on the bottom end of the stack in
- * thread_checkstack_init. If these assertions go off, it most likely
+ * thread_checkstack_init. If these KASSERTions go off, it most likely
  * means you overflowed your stack at some point, which can cause all
  * kinds of mysterious other things to happen.
  *
@@ -262,6 +263,8 @@ thread_destroy(struct thread *thread)
 	/* sheer paranoia */
 	thread->t_wchan_name = "DESTROYED";
 
+  KASSERT(thread->t_filetable == NULL);
+
 	kfree(thread->t_name);
 	kfree(thread);
 }
@@ -798,6 +801,11 @@ thread_exit(void)
 		VOP_DECREF(cur->t_cwd);
 		cur->t_cwd = NULL;
 	}
+	
+	if (curthread->t_filetable) {
+		filetable_destroy(curthread->t_filetable);
+		curthread->t_filetable = NULL;
+	}
 
 	/* VM fields */
 	if (cur->t_addrspace) {
